{"version":3,"sources":["Card.js","utils.js","CardList.js","App.js","index.js"],"names":["Card","props","this","title","mainText","footerText","color","className","style","toLocaleString","Component","formatMillions","labelValue","Math","abs","Number","toFixed","CardList","useState","activeCases","recoveredCases","deaths","totalActiveCases","totalRecoveredCases","totalDeaths","cases","updateCases","useEffect","fetch","then","res","json","recovered","todayCases","todayDeaths","todayRecovered","console","log","display","margin","App","padding","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPA0BeA,G,wDAnBb,WAAYC,GAAQ,uCACZA,G,qDAGC,MAEwCC,KAAKD,MAA5CE,EAFD,EAECA,MAAOC,EAFR,EAEQA,SAAUC,EAFlB,EAEkBA,WAAYC,EAF9B,EAE8BA,MAGrC,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,SAASJ,GACxB,yBAAKI,UAAU,YAAYC,MAAO,CAAEF,MAAOA,IAA3C,YAA0DF,EAASK,mBACnE,yBAAKF,UAAU,eAAf,UAAiCF,EAAWI,iBAA5C,gB,GAhBWC,cCJZ,SAASC,EAAeC,GAG3B,OAAOC,KAAKC,IAAIC,OAAOH,KAAgB,KAEpCC,KAAKC,IAAIC,OAAOH,IAAe,KAAQI,QAAQ,GAAK,IAErDH,KAAKC,IAAIC,OAAOH,KAAgB,KAE/BC,KAAKC,IAAIC,OAAOH,IAAe,KAAQI,QAAQ,GAAK,IAErDH,KAAKC,IAAIC,OAAOH,KAAgB,KAE/BC,KAAKC,IAAIC,OAAOH,IAAe,KAAQI,QAAQ,GAAK,IAErDH,KAAKC,IAAIC,OAAOH,ICTaF,YA+FpBO,MAlDf,WAAoB,MAESC,mBAAS,CAClCC,YAAa,EACbC,eAAgB,EAChBC,OAAQ,EACRC,iBAAkB,EAClBC,oBAAqB,EACrBC,YAAa,IARG,mBAEbC,EAFa,KAENC,EAFM,KAYlBC,qBAAU,WAcR,OAbAC,MAAM,sCAAsCC,MAAK,SAACC,GAChDA,EAAIC,OAAOF,MAAK,SAACE,GAAU,IACnBN,EAAsEM,EAAtEN,MAAOO,EAA+DD,EAA/DC,UAAWX,EAAoDU,EAApDV,OAAQY,EAA4CF,EAA5CE,WAAYC,EAAgCH,EAAhCG,YAAaC,EAAmBJ,EAAnBI,eACzDT,EAAY,CACVP,YAAac,EACbb,eAAgBe,EAChBd,OAAQa,EACRZ,iBAAkBX,EAAec,GACjCF,oBAAqBZ,EAAeqB,GACpCR,YAAab,EAAeU,WAI3B,WAELe,QAAQC,IAAI,gBAEb,IAGHV,qBAAU,WACRS,QAAQC,IAAI,wCACZD,QAAQC,IAAI,oCACX,CAACZ,EAAMN,cApCQ,IAsCVA,EAA4FM,EAA5FN,YAAaC,EAA+EK,EAA/EL,eAAgBC,EAA+DI,EAA/DJ,OAAQC,EAAuDG,EAAvDH,iBAAkBE,EAAqCC,EAArCD,YAAaD,EAAwBE,EAAxBF,oBAE5E,OACE,6BACE,kBAAC,EAAD,CAAMjB,MAAM,0BAA0BH,MAAM,oBAAoBC,SAAUe,EAAad,WAAYiB,IACnG,kBAAC,EAAD,CAAMhB,MAAM,0BAA0BH,MAAM,YAAYC,SAAUgB,EAAgBf,WAAYkB,IAC9F,kBAAC,EAAD,CAAMjB,MAAM,qBAAqBH,MAAM,SAASC,SAAUiB,EAAQhB,WAAYmB,IAC9E,wBAAIhB,MAAO,CAAC8B,QAAQ,eAAgBhC,MAAO,wBAAyBiC,OAAO,WAA3E,eClFSC,MAXf,WAGE,OACE,yBAAKhC,MAAO,CAACiC,QAAS,KACpB,wBAAIjC,MAAO,CAACF,MAAM,QAASiC,OAAQ,KAAnC,mBACA,kBAAC,EAAD,QCFNG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.7eb96a7e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Card.css\";\n\n// Card component extended from class Component of react\nclass Card extends Component {\n  // Constructor is not used and can be removed\n  // it can be used to set some initial state\n  constructor(props) {\n    super(props);\n  }\n  // return a HTML for reactDOM to render\n  render() {\n    // Extarct the value from the props using destructors\n    const { title, mainText, footerText, color } = this.props;\n    // return the HTML snippet, inject values from received from props\n    // and apply styles to style the card\n    return (\n      <div className=\"card\">\n        <div className=\"title\">{title}</div>\n        <div className=\"main-text\" style={{ color: color }}>{`+ ${mainText.toLocaleString()}`}</div>\n        <div className=\"footer-text\">{`${footerText.toLocaleString()} total`}</div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","export function formatMillions(labelValue) {\n\n    // Nine Zeroes for Billions\n    return Math.abs(Number(labelValue)) >= 1.0e+9\n\n    ? (Math.abs(Number(labelValue)) / 1.0e+9).toFixed(1) + \"B\"\n    // Six Zeroes for Millions \n    : Math.abs(Number(labelValue)) >= 1.0e+6\n\n    ? (Math.abs(Number(labelValue)) / 1.0e+6).toFixed(1) + \"M\"\n    // Three Zeroes for Thousands\n    : Math.abs(Number(labelValue)) >= 1.0e+3\n\n    ? (Math.abs(Number(labelValue)) / 1.0e+3).toFixed(1) + \"K\"\n\n    : Math.abs(Number(labelValue));\n\n}","import React, { Component, useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport { formatMillions } from \"./utils\";\n\n// CardList class based component\n// This component is not used\nexport class CardListClass extends Component {\n  // Removed\n  constructor(props) {\n    super(props);\n    // useState\n    this.state = {\n      activeCases: 0,\n      recoveredCases: 0,\n      deaths: 0,\n      totalActiveCases: 0,\n      totalRecoveredCases: 0,\n      totalDeaths: 0,\n    };\n  }\n  // useEffect\n  componentDidMount() {\n    fetch(\"https://disease.sh/v3/covid-19/all\").then((res) => {\n      res.json().then((json) => {\n        let { cases, recovered, deaths, todayCases, todayDeaths, todayRecovered } = json;\n        // updateState\n        this.setState({\n          activeCases: todayCases,\n          recoveredCases: todayRecovered,\n          deaths: todayDeaths,\n          totalActiveCases: cases,\n          totalRecoveredCases: recovered,\n          totalDeaths: deaths,\n        });\n      });\n    });\n  }\n  // Function Body\n  render() {\n    const { activeCases, recoveredCases, deaths, totalActiveCases, totalDeaths, totalRecoveredCases } = this.state;\n    return (\n      <div>\n        <Card color=\"#cc1034\" title=\"Coronavirus Cases\" mainText={activeCases} footerText={totalActiveCases} />\n        <Card color=\"#7fd922\" title=\"Recovered\" mainText={recoveredCases} footerText={totalRecoveredCases} />\n        <Card color=\"#FA5575\" title=\"Deaths\" mainText={deaths} footerText={totalDeaths} />\n      </div>\n    );\n  }\n}\n// Works same as class based component but used hooks\n// and effects for life cycle methods\nfunction CardList() {\n  // Create a state variable and save it to variables cases and updateCases\n  let [cases, updateCases] = useState({\n    activeCases: 0,\n    recoveredCases: 0,\n    deaths: 0,\n    totalActiveCases: 0,\n    totalRecoveredCases: 0,\n    totalDeaths: 0,\n  });\n\n  // This effect the serves the same purpouse as componentDidMount of class component\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\").then((res) => {\n      res.json().then((json) => {\n        let { cases, recovered, deaths, todayCases, todayDeaths, todayRecovered } = json;\n        updateCases({\n          activeCases: todayCases,\n          recoveredCases: todayRecovered,\n          deaths: todayDeaths,\n          totalActiveCases: formatMillions(cases),\n          totalRecoveredCases: formatMillions(recovered),\n          totalDeaths: formatMillions(deaths),\n        });\n      });\n    });\n    return () => {\n      // Unmounting\n      console.log(\"unmounted\");\n    };\n  }, []); // note we are not passing an empty array, suggesting it doesn't depend on any values\n\n  // Dummy effect used to show case onUpdate lifecycle hook\n  useEffect(() => {\n    console.log(\"I am called on update of any depency\");\n    console.log(\"In this case cases.activeCases\");\n  }, [cases.activeCases]);\n  // extarct the values from the state object cases\n  const { activeCases, recoveredCases, deaths, totalActiveCases, totalDeaths, totalRecoveredCases } = cases;\n  // render card for each information\n  return (\n    <div>\n      <Card color=\"rgba(204, 16, 52, 0.64)\" title=\"Coronavirus Cases\" mainText={activeCases} footerText={totalActiveCases} />\n      <Card color=\"rgba(62, 109, 21, 0.59)\" title=\"Recovered\" mainText={recoveredCases} footerText={totalRecoveredCases} />\n      <Card color=\"rgb(208, 167, 174)\" title=\"Deaths\" mainText={deaths} footerText={totalDeaths} />\n      <h2 style={{display:\"inline-block\", color: \"rgba(51, 51, 51, 0.2)\", margin:\"0 32px\"}}>Worldwide</h2>\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from \"react\";\nimport CardList from './CardList';\n\nfunction App() {\n  // Structure of your application\n  // Render the header and cardList component\n  return (\n    <div style={{padding: 16}}>\n      <h1 style={{color:\"#3333\", margin: 18}}>Covid19 Tracker</h1>\n      <CardList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';  // import normal css to apply to body background color\nimport App from './App'; // import App \n\n// Render the react app imported and render the dom,\n// inside the element with id root in index.html\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}